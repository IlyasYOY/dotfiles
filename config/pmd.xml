<?xml version="1.0"?>
<ruleset name="Custom Rules"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        This is IlyasYOY's PMD config.

        Based on: https://github.com/pmd/pmd/blob/master/pmd-core/src/main/resources/rulesets/internal/all-java.xml
    </description>

    <!-- Lexer test cases - wrong encoding, illegal characters, ... -->
    <exclude-pattern>.*/ant/java/EncodingTestClass.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/cpd/badandgood/BadFile.java</exclude-pattern>

    <!-- the following files produce parsing errors with java 9, as they use identifiers, that
         are now reserved keywords and are forbidden to be used as identifiers.
    -->
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5_a.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test7.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk14_enum.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk9_invalid_identifier.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsAnnotationName.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsEnumName.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsTypeIdentifier.java</exclude-pattern>

    <!-- this file contains are parse error explicitly -->
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/InfiniteLoopInLookahead.java</exclude-pattern>

    <!-- with java-20-preview there is now invalid code in java-19-preview -->
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java19p/DealingWithNull.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java19p/ExhaustiveSwitch.java</exclude-pattern>

    <rule ref="category/java/bestpractices.xml">
        <exclude name="JUnitTestsShouldIncludeAssert" />
        <exclude name="JUnitTestContainsTooManyAsserts" />
    </rule>
    <rule ref="category/java/codestyle.xml">
        <exclude name="MethodArgumentCouldBeFinal" />
        <exclude name="MethodNamingConventions" />
        <exclude name="LocalVariableCouldBeFinal" />
        <!-- Spring usually requires devs to use long names -->
        <exclude name="LongVariable" />
        <!-- False positive on "id" -->
        <exclude name="ShortVariable" />
        <!-- False positive on static imports and is duplicated by LSP/IDE -->
        <exclude name="UnnecessaryImport" />

        <exclude name="AtLeastOneConstructor" />
        <!-- I personally prefer guard expression golang-like style. -->
        <exclude name="OnlyOneReturn" />
    </rule>
    <rule ref="category/java/design.xml">
        <exclude name="LoosePackageCoupling" />
        <!-- bothers in tests -->
        <exclude name="TooManyMethods" />
        <!-- A low of false positive with common chaining API -->
        <exclude name="LawOfDemeter" />
        <exclude name="ExcessiveImports" />
    </rule>
    <rule ref="category/java/documentation.xml">
        <exclude name="CommentRequired" />
        <exclude name="CommentSize" />
    </rule>
    <rule ref="category/java/errorprone.xml">
    </rule>
    <rule ref="category/java/multithreading.xml">
    </rule>
    <rule ref="category/java/performance.xml">
    </rule>

    <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier">
        <properties>
            <property name="ignoredAnnotations" value="android.support.annotation.VisibleForTesting|co.elastic.clients.util.VisibleForTesting|com.google.common.annotations.VisibleForTesting|org.junit.jupiter.api.AfterAll|org.junit.jupiter.api.AfterEach|org.junit.jupiter.api.BeforeAll|org.junit.jupiter.api.BeforeEach|org.junit.jupiter.api.Nested|org.junit.jupiter.api.ParameterizedTest|org.junit.jupiter.params.ParameterizedTest|org.junit.jupiter.api.RepeatedTest|org.junit.jupiter.api.Test|org.junit.jupiter.api.TestFactory|org.junit.jupiter.api.TestTemplate|org.junit.jupiter.api.extension.RegisterExtension|org.testng.annotations.AfterClass|org.testng.annotations.AfterGroups|org.testng.annotations.AfterMethod|org.testng.annotations.AfterSuite|org.testng.annotations.AfterTest|org.testng.annotations.BeforeClass|org.testng.annotations.BeforeGroups|org.testng.annotations.BeforeMethod|org.testng.annotations.BeforeSuite|org.testng.annotations.BeforeTest|org.testng.annotations.Test|org.springframework.test.context.DynamicPropertySource" />
            <property name="regex" value="\/\*\s*(default|package)\s*\*\/" />
            <property name="checkTopLevelTypes" value="false" />
        </properties>
    </rule>
</ruleset>
